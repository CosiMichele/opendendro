{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Code, example data, and manuscript supplemental materials which accompany openDendro Lead Author: Andy Bunn Co-Authors: Ed Cook , Kevin Anchukaitis , Tyson Lee Swetnam Contents \u00b6 The repository is organized (in the attempt) to enable reproducible research as part of the FAIR data principles . You can (re)run these analyses using your own computer, on commercial cloud, or a data science workbench CyVerse Discovery Environment. Clone the repo to your local or VM: git clone https://github.com/opendendro/opendendro gh repo clone opendendro/opendendro","title":"Introduction"},{"location":"#contents","text":"The repository is organized (in the attempt) to enable reproducible research as part of the FAIR data principles . You can (re)run these analyses using your own computer, on commercial cloud, or a data science workbench CyVerse Discovery Environment. Clone the repo to your local or VM: git clone https://github.com/opendendro/opendendro gh repo clone opendendro/opendendro","title":"Contents"},{"location":"cyverse/","text":"CyVerse \u00b6 Containers for running dplR or dplPy are hosted on the CyVerse.org Discovery Environment Steps \u00b6 Create a CyVerse account here request access to the VICE Start one of the featured containers: CyVerse maintains featured apps from the Rocker-Project , Project Jupyter , and Visual Studio Code quick launch Base Images Rocker-Project Project Jupyter Visual Studio Code clone the repository into the running container: Open a terminal and type: git clone https://github.com/opendendro/dplPy git clone https://github.com/andybunn/dplR","title":"CyVerse"},{"location":"cyverse/#cyverse","text":"Containers for running dplR or dplPy are hosted on the CyVerse.org Discovery Environment","title":"CyVerse"},{"location":"cyverse/#steps","text":"Create a CyVerse account here request access to the VICE Start one of the featured containers: CyVerse maintains featured apps from the Rocker-Project , Project Jupyter , and Visual Studio Code quick launch Base Images Rocker-Project Project Jupyter Visual Studio Code clone the repository into the running container: Open a terminal and type: git clone https://github.com/opendendro/dplPy git clone https://github.com/andybunn/dplR","title":"Steps"},{"location":"data/","text":"data \u00b6","title":"Data"},{"location":"data/#data","text":"","title":"data"},{"location":"docker/","text":"Docker \u00b6 We use Docker to build our respective integrated development environments (IDE) for working with dpl software. RStudio containers are based on the Rocker R and RStudio builds. CyVerse rehosts the Rocker images in its data science workbench, the Discovery Environment . CyVerse container builds are maintained on a GitHub Organization , and hosted on its private Harbor Registry . JupyterLab containers are based on the Project Jupyter image stacks. Testing \u00b6 Run Docker for testing the code with Jupyter Lab or RStudio-Server. Install the Docker Desktop for Windows or Mac OS X, or command line for Linux. Pull pre-existing Docker images for RStudio-Server or JupyterLab : docker pull rocker/geospatial:latest docker pull jupyter/datascience-notebook:latest To run RStudio-Server (authentication user: rstudio , password: set it yourself below): $ git clone https://github.com/opendendro/dplPy $ cd dplPy $ docker run -it --rm -p 8787:8787 -e PASSWORD=new_password -v $PWD:/home/rstudio/dplPy -e REDIRECT_URL=http://localhost:8787 rocker/geospatial:latest Open your browser and navigate to http://localhost:8787 If you're running remotely, use the DNS of the virtual machine service with the :8787 or allow it to open the tab for you, e.g., with CodeSpaces or GitPod. From the R Console: > install.packages(\"dplR\", dependencies=TRUE) The Project Jupyter DataScience Notebook runs both Python and R: $ git clone https://github.com/opendendro/dplPy $ cd dplPy $ docker run -it --rm -p 8888:8888 -v $PWD:/home/jovyan/dplPy -e REDIRECT_URL=http://localhost:8888 jupyter/datascience-notebook:latest jupyter lab --no-browser --NotebookApp.token='' Open your browser and navigate to http://localhost:8888 Note: that we're disabling the Notebook Token so you don't have to authenticate; remove --NotebookApp.token='' to re-enable.","title":"Docker"},{"location":"docker/#docker","text":"We use Docker to build our respective integrated development environments (IDE) for working with dpl software. RStudio containers are based on the Rocker R and RStudio builds. CyVerse rehosts the Rocker images in its data science workbench, the Discovery Environment . CyVerse container builds are maintained on a GitHub Organization , and hosted on its private Harbor Registry . JupyterLab containers are based on the Project Jupyter image stacks.","title":"Docker"},{"location":"docker/#testing","text":"Run Docker for testing the code with Jupyter Lab or RStudio-Server. Install the Docker Desktop for Windows or Mac OS X, or command line for Linux. Pull pre-existing Docker images for RStudio-Server or JupyterLab : docker pull rocker/geospatial:latest docker pull jupyter/datascience-notebook:latest To run RStudio-Server (authentication user: rstudio , password: set it yourself below): $ git clone https://github.com/opendendro/dplPy $ cd dplPy $ docker run -it --rm -p 8787:8787 -e PASSWORD=new_password -v $PWD:/home/rstudio/dplPy -e REDIRECT_URL=http://localhost:8787 rocker/geospatial:latest Open your browser and navigate to http://localhost:8787 If you're running remotely, use the DNS of the virtual machine service with the :8787 or allow it to open the tab for you, e.g., with CodeSpaces or GitPod. From the R Console: > install.packages(\"dplR\", dependencies=TRUE) The Project Jupyter DataScience Notebook runs both Python and R: $ git clone https://github.com/opendendro/dplPy $ cd dplPy $ docker run -it --rm -p 8888:8888 -v $PWD:/home/jovyan/dplPy -e REDIRECT_URL=http://localhost:8888 jupyter/datascience-notebook:latest jupyter lab --no-browser --NotebookApp.token='' Open your browser and navigate to http://localhost:8888 Note: that we're disabling the Notebook Token so you don't have to authenticate; remove --NotebookApp.token='' to re-enable.","title":"Testing"},{"location":"fortran/","text":"fortran77 \u00b6 Lamont-Doherty Earth Observatory related software - https://www.ldeo.columbia.edu/tree-ring-laboratory/resources/software ARSTAN PDF","title":"Fortran77"},{"location":"fortran/#fortran77","text":"Lamont-Doherty Earth Observatory related software - https://www.ldeo.columbia.edu/tree-ring-laboratory/resources/software ARSTAN PDF","title":"fortran77"},{"location":"itrdb/","text":"International Tree Ring Databank \u00b6 The International Tree Ring Databank","title":"ITRDB"},{"location":"itrdb/#international-tree-ring-databank","text":"The International Tree Ring Databank","title":"International Tree Ring Databank"},{"location":"python/","text":"The dplPy User Manual \u00b6 Welcome to the dplPy manual. Requirements \u00b6 Python v3.8 Pip Miniconda3 Jupyter Notebook Suggested: VSCode Installation \u00b6 Note DplPy is planned to be released as a pip and conda packages for easy installation ( pip install dplpy or conda install -c conda-forge dplpy ). Warning Prior to creating an enviroment, ensure that you are outside of base by doing conda deactivate . This should be repeated at any give instance where the conda environment is shown as base . Clone the GitHub repository to your personal machine: git clone https://github.com/OpenDendro/dplPy.git ; move into the repository cd dplPy/ Build conda environment: conda create -n dplpy3 python=3.8 ; Activate: conda activate dplpy3 Install CSAPS : pip install -U csaps Update conda environment: conda env update -f environment.yml --prune Usage \u00b6 Although DplPy is executable from the command line interface (CLI), e.g., BASH, ZSH, or a Cygwin terminal, The usage of Jupyter Notebook is suggested (operated through VSCode). Accessing Jupyter Notebook on Linux, MacOS \u00b6 In your VSCode terminal, activate the conda environment with conda activate dplpy3 . Open a Jupyer Notebook ( <file>.ipynb ) and select the dplpy3 Kernel when prompted (or from the top right of your screen). This will automatically load the environment we created. Accessing Jupyter Notebook on Windows \u00b6 In VSCode: In your VSCode terminal window, activate the conda environment with conda activate dplpy3 . In the same terminal window, start a Jupyter Notebook with jupyter notebook . Jupyter will then return URLs that you can copy; Copy one of these URLs. Open a Jupyter Notebook ( <file>.ipynb ) and from the bottom right of the VSCode screen, click Jupyter Server ; A dropdown menu will open from the top of the screen: select Existing and paste the URL you copied. Jupyter Notebook will now be able to access the environment created. Help menu \u00b6 Echos the help menu on the CLI $ python dplpy.py help >>> import dplpy as dpl >>> dpl.help() readme \u00b6 Opens this webpage CLI: $ python dplpy.py readme Python Console: >> import dplpy as dpl >> dpl.readme() readers \u00b6 Imports a .rwl or .csv format ring width series file and converts it to a dataframe (array). full flag short flag Description --input -i Input files come from the localhost using the --input parameter --url -u Input file from any public URL using the --url parameter --name -n name of the array created from the file CLI: $ python dplpy reader --input=/home/user/directory/filename.rwl --name=dataset1 $ python dplpy reader -i /home/user/directory/filename.rwl -n dataset1 $ python dplpy reader /home/user/directory/filename.rwl dataset1 $ $ python dplpy reader --input=/home/user/directory/filename.csv --name=dataset2 $ python dplpy reader csv /home/user/directory/filename.csv dataset2 $ $ python dplpy reader --url=https://data.cyverse.org/dav-anon/iplant/home/user/opendendro/data/filename.rwl --name=dataset3 $ python dplpy reader https://data.cyverse.org/dav-anon/iplant/home/user/opendendro/data/filename.rwl dataset3 Python Console: >> import dplpy as dpl >> dataset1 = dpl.reader(\"/home/user/directory/filename.rwl\") summary \u00b6 Creates and prints the summary statistics for a ring width series dataframe full flag short flag Description --input -i Input files come from the localhost using the --input parameter or from any public URL using the --url parameter --stats -s summary statistics to output all reports all stats CLI: $ python dplpy.py summary --input=/home/user/directory/filename.rwl --stats=all $ python dplpy.py summary /home/user/directory/filename.rwl all $ python dplpy.py summary /home/user/directory/filename.rwl --stats=mean $ python dplpy.py summary /home/user/directory/filename.rwl mean Python Console: >> import dplpy as dpl >> dataset1 = dpl.readers(\"/home/user/directory/filename.rwl\") >> dpl.summary(dataset1, all) >> >> summary_dataset1 = dpl.summary(\"/home/user/directory/filename.rwl\") Development \u00b6 We encourage community contributions through our GitHub , feel free to create Issues and Pull Requests. use the dev branch for our most up-to-date and bleeding edge version. $ git clone https://github.com/opendendro/dplpy $ cd dplpy $ git switch dev","title":"Python"},{"location":"python/#the-dplpy-user-manual","text":"Welcome to the dplPy manual.","title":"The dplPy User Manual"},{"location":"python/#requirements","text":"Python v3.8 Pip Miniconda3 Jupyter Notebook Suggested: VSCode","title":"Requirements"},{"location":"python/#installation","text":"Note DplPy is planned to be released as a pip and conda packages for easy installation ( pip install dplpy or conda install -c conda-forge dplpy ). Warning Prior to creating an enviroment, ensure that you are outside of base by doing conda deactivate . This should be repeated at any give instance where the conda environment is shown as base . Clone the GitHub repository to your personal machine: git clone https://github.com/OpenDendro/dplPy.git ; move into the repository cd dplPy/ Build conda environment: conda create -n dplpy3 python=3.8 ; Activate: conda activate dplpy3 Install CSAPS : pip install -U csaps Update conda environment: conda env update -f environment.yml --prune","title":"Installation"},{"location":"python/#usage","text":"Although DplPy is executable from the command line interface (CLI), e.g., BASH, ZSH, or a Cygwin terminal, The usage of Jupyter Notebook is suggested (operated through VSCode).","title":"Usage"},{"location":"python/#accessing-jupyter-notebook-on-linux-macos","text":"In your VSCode terminal, activate the conda environment with conda activate dplpy3 . Open a Jupyer Notebook ( <file>.ipynb ) and select the dplpy3 Kernel when prompted (or from the top right of your screen). This will automatically load the environment we created.","title":"Accessing Jupyter Notebook on Linux, MacOS"},{"location":"python/#accessing-jupyter-notebook-on-windows","text":"In VSCode: In your VSCode terminal window, activate the conda environment with conda activate dplpy3 . In the same terminal window, start a Jupyter Notebook with jupyter notebook . Jupyter will then return URLs that you can copy; Copy one of these URLs. Open a Jupyter Notebook ( <file>.ipynb ) and from the bottom right of the VSCode screen, click Jupyter Server ; A dropdown menu will open from the top of the screen: select Existing and paste the URL you copied. Jupyter Notebook will now be able to access the environment created.","title":"Accessing Jupyter Notebook on Windows"},{"location":"python/#help-menu","text":"Echos the help menu on the CLI $ python dplpy.py help >>> import dplpy as dpl >>> dpl.help()","title":"Help menu"},{"location":"python/#readme","text":"Opens this webpage CLI: $ python dplpy.py readme Python Console: >> import dplpy as dpl >> dpl.readme()","title":"readme"},{"location":"python/#readers","text":"Imports a .rwl or .csv format ring width series file and converts it to a dataframe (array). full flag short flag Description --input -i Input files come from the localhost using the --input parameter --url -u Input file from any public URL using the --url parameter --name -n name of the array created from the file CLI: $ python dplpy reader --input=/home/user/directory/filename.rwl --name=dataset1 $ python dplpy reader -i /home/user/directory/filename.rwl -n dataset1 $ python dplpy reader /home/user/directory/filename.rwl dataset1 $ $ python dplpy reader --input=/home/user/directory/filename.csv --name=dataset2 $ python dplpy reader csv /home/user/directory/filename.csv dataset2 $ $ python dplpy reader --url=https://data.cyverse.org/dav-anon/iplant/home/user/opendendro/data/filename.rwl --name=dataset3 $ python dplpy reader https://data.cyverse.org/dav-anon/iplant/home/user/opendendro/data/filename.rwl dataset3 Python Console: >> import dplpy as dpl >> dataset1 = dpl.reader(\"/home/user/directory/filename.rwl\")","title":"readers"},{"location":"python/#summary","text":"Creates and prints the summary statistics for a ring width series dataframe full flag short flag Description --input -i Input files come from the localhost using the --input parameter or from any public URL using the --url parameter --stats -s summary statistics to output all reports all stats CLI: $ python dplpy.py summary --input=/home/user/directory/filename.rwl --stats=all $ python dplpy.py summary /home/user/directory/filename.rwl all $ python dplpy.py summary /home/user/directory/filename.rwl --stats=mean $ python dplpy.py summary /home/user/directory/filename.rwl mean Python Console: >> import dplpy as dpl >> dataset1 = dpl.readers(\"/home/user/directory/filename.rwl\") >> dpl.summary(dataset1, all) >> >> summary_dataset1 = dpl.summary(\"/home/user/directory/filename.rwl\")","title":"summary"},{"location":"python/#development","text":"We encourage community contributions through our GitHub , feel free to create Issues and Pull Requests. use the dev branch for our most up-to-date and bleeding edge version. $ git clone https://github.com/opendendro/dplpy $ cd dplpy $ git switch dev","title":"Development"},{"location":"r/","text":"The dplR library is hosted on CRAN and can be run in RStudio and RStudio-Server (in browser). Installation \u00b6 Basic installation: install.packages(\"dplR\", dependencies=TRUE) library(dplR) Development install \u00b6 devtools::install_github(\"andybunn/dplR\") dplR Workshop \u00b6 The dplR-workshop website contains the training material for using dplR and is linked here. Vignettes \u00b6 View a vignette on time series analyses as pdf directly from R console: > vignette(topic=\"timeseries-dplR\",package=\"dplR\") Edit the code in R: > edit(vignette(topic=\"timeseries-dplR\",package=\"dplR\"))","title":"R"},{"location":"r/#installation","text":"Basic installation: install.packages(\"dplR\", dependencies=TRUE) library(dplR)","title":"Installation"},{"location":"r/#development-install","text":"devtools::install_github(\"andybunn/dplR\")","title":"Development install"},{"location":"r/#dplr-workshop","text":"The dplR-workshop website contains the training material for using dplR and is linked here.","title":"dplR Workshop"},{"location":"r/#vignettes","text":"View a vignette on time series analyses as pdf directly from R console: > vignette(topic=\"timeseries-dplR\",package=\"dplR\") Edit the code in R: > edit(vignette(topic=\"timeseries-dplR\",package=\"dplR\"))","title":"Vignettes"},{"location":"assets/","text":"images go here","title":"Index"}]}